# Generated by Django 5.2.1 on 2025-06-14 12:36

import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import django_countries.fields
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('consent_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('terms_accepted', models.BooleanField(default=False, verbose_name='Accepted Terms of Service')),
                ('terms_accepted_date', models.DateTimeField(blank=True, null=True)),
                ('privacy_accepted', models.BooleanField(default=False, verbose_name='Accepted Privacy Policy')),
                ('privacy_accepted_date', models.DateTimeField(blank=True, null=True)),
                ('consent_version', models.CharField(default='1.0', max_length=20, verbose_name='Policy Version')),
                ('public_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('phone_number', models.CharField(blank=True, max_length=20, validators=[django.core.validators.RegexValidator(message="Phone number must be in the format: '+2547XXXXXXXX'", regex='^\\+?254\\d{9}$')], verbose_name='Phone Number')),
                ('phone_verified', models.BooleanField(default=False)),
                ('email_verified', models.BooleanField(default=False)),
                ('county', models.CharField(blank=True, choices=[('Nairobi', 'Nairobi'), ('Mombasa', 'Mombasa'), ('Kisumu', 'Kisumu'), ('Nakuru', 'Nakuru'), ('Eldoret', 'Eldoret'), ('Thika', 'Thika'), ('Malindi', 'Malindi'), ('Kitale', 'Kitale'), ('Kakamega', 'Kakamega'), ('Kisii', 'Kisii'), ('Garissa', 'Garissa'), ('Wajir', 'Wajir'), ('Mandera', 'Mandera'), ('Marsabit', 'Marsabit'), ('Isiolo', 'Isiolo'), ('Meru', 'Meru'), ('Nyeri', 'Nyeri'), ('Embu', 'Embu'), ('Machakos', 'Machakos'), ('Kitui', 'Kitui'), ('Makueni', 'Makueni'), ('Nyandarua', 'Nyandarua'), ('Nandi', 'Nandi'), ('Bomet', 'Bomet'), ('Kericho', 'Kericho'), ('Bungoma', 'Bungoma'), ('Busia', 'Busia'), ('Siaya', 'Siaya'), ('Homa Bay', 'Homa Bay'), ('Migori', 'Migori'), ('Kilifi', 'Kilifi'), ('Kwale', 'Kwale'), ('Lamu', 'Lamu'), ('Taita Taveta', 'Taita Taveta'), ('Trans Nzoia', 'Trans Nzoia'), ('Uasin Gishu', 'Uasin Gishu'), ('Elgeyo-Marakwet', 'Elgeyo-Marakwet'), ('West Pokot', 'West Pokot'), ('Samburu', 'Samburu'), ('Turkana', 'Turkana'), ('Laikipia', 'Laikipia'), ('Muranga', 'Muranga'), ('Kirinyaga', 'Kirinyaga'), ('Vihiga', 'Vihiga'), ('Baringo', 'Baringo'), ('Narok', 'Narok')], max_length=50)),
                ('town', models.CharField(blank=True, max_length=100)),
                ('postal_address', models.CharField(blank=True, max_length=100)),
                ('last_password_update', models.DateTimeField(auto_now_add=True)),
                ('failed_login_attempts', models.PositiveIntegerField(default=0)),
                ('account_locked_until', models.DateTimeField(blank=True, null=True)),
                ('two_factor_enabled', models.BooleanField(default=False)),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User Account',
                'verbose_name_plural': 'User Accounts',
                'ordering': ['-date_joined'],
            },
        ),
        migrations.CreateModel(
            name='ActivityLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity_type', models.CharField(choices=[('login', 'Login'), ('password_change', 'Password Change'), ('profile_update', 'Profile Update'), ('address_add', 'Address Added'), ('payment_add', 'Payment Method Added'), ('consent_update', 'Consent Updated')], max_length=50)),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.CharField(max_length=255)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('additional_info', models.JSONField(blank=True, default=dict)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='activities', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Activity Logs',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('street_address', models.CharField(max_length=255)),
                ('city', models.CharField(max_length=100)),
                ('state', models.CharField(blank=True, max_length=100)),
                ('postal_code', models.CharField(max_length=20)),
                ('country', django_countries.fields.CountryField(default='KE', max_length=2)),
                ('is_default', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('address_type', models.CharField(choices=[('home', 'Home'), ('work', 'Work'), ('other', 'Other')], default='home', max_length=20)),
                ('notes', models.TextField(blank=True, max_length=500)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='addresses', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Addresses',
                'ordering': ['-is_default', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PasswordHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='password_history', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Password Histories',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PaymentMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('encrypted_card_number', models.CharField(max_length=255)),
                ('encrypted_expiry_date', models.CharField(max_length=255)),
                ('encrypted_cvv', models.CharField(max_length=255)),
                ('cardholder_name', models.CharField(max_length=100)),
                ('is_default', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('card_type', models.CharField(choices=[('visa', 'Visa'), ('mastercard', 'MasterCard'), ('amex', 'American Express'), ('other', 'Other')], max_length=20)),
                ('last_4_digits', models.CharField(editable=False, max_length=4)),
                ('expiration_month', models.PositiveIntegerField(editable=False)),
                ('expiration_year', models.PositiveIntegerField(editable=False)),
                ('is_active', models.BooleanField(default=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payment_methods', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Payment Methods',
                'ordering': ['-is_default', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('profile_image', models.ImageField(blank=True, upload_to='profile_pics/%Y/%m/%d/', validators=[django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png'])], verbose_name='Profile Picture')),
                ('bio', models.TextField(blank=True, max_length=500, verbose_name='About Me')),
                ('email_notifications', models.BooleanField(default=True, verbose_name='Email Notifications')),
                ('sms_notifications', models.BooleanField(default=False, verbose_name='SMS Notifications')),
                ('preferred_language', models.CharField(choices=[('en', 'English'), ('sw', 'Swahili')], default='en', max_length=10)),
                ('dark_mode', models.BooleanField(default=False)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('preferences', models.JSONField(blank=True, default=dict, verbose_name='User Preferences')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Profile',
                'verbose_name_plural': 'User Profiles',
            },
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['email'], name='users_custo_email_c80f75_idx'),
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['phone_number'], name='users_custo_phone_n_f2d675_idx'),
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['public_id'], name='users_custo_public__04a8b8_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='address',
            unique_together={('user', 'street_address', 'postal_code')},
        ),
    ]
